/*
Firestore Security Rules cho Social Media Web Database - UPDATED - Admin Permissions
Cập nhật rules để cho phép admin delete users, posts, comments
Thêm function kiểm tra admin role và cấp quyền admin operations
*/

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function kiểm tra user có role admin không
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.Role == 'admin';
    }
    
    // Users collection - Admin có thể delete users, users chỉ có thể edit profile của mình, admin có thể update role
    match /users/{userId} {
      allow read: if true; // Public read để hiển thị profile, search users và check admin role
      allow create: if request.auth != null && request.auth.uid == userId; // Chỉ owner có thể tạo
      allow update: if (request.auth != null && request.auth.uid == userId) || // Owner có thể update profile của mình
                       isAdmin(); // Admin có thể update bất kỳ user nào (bao gồm thay đổi role)
      allow delete: if isAdmin(); // Chỉ admin có thể xóa users
    }
    
    // Posts collection - Admin có thể delete bất kỳ post nào
    match /posts/{postId} {
      allow read: if true; // Public read cho discover, home feed
      allow create: if request.auth != null; // Authenticated users có thể tạo post
      allow update: if request.auth != null && 
                   (request.auth.uid == resource.data.UserID || // Owner của post
                    (resource.data.UserID != null && request.auth.uid != null)); // Data sync operations
      allow delete: if (request.auth != null && request.auth.uid == resource.data.UserID) || // Owner có thể xóa
                       isAdmin(); // Admin có thể xóa bất kỳ post nào
    }
    
    // Comments collection - Admin có thể delete bất kỳ comment nào
    match /comments/{commentId} {
      allow read: if true; // Public read để hiển thị comments
      allow create: if request.auth != null; // Authenticated users có thể tạo comment
      allow update: if request.auth != null && 
                   (request.auth.uid == resource.data.UserID || // Owner của comment
                    (resource.data.UserID != null && request.auth.uid != null)); // Data sync operations
      allow delete: if (request.auth != null && request.auth.uid == resource.data.UserID) || // Owner có thể xóa
                       isAdmin(); // Admin có thể xóa bất kỳ comment nào
    }
    
    // Likes collection - Admin có thể delete likes nếu cần
    match /likes/{likeId} {
      allow read: if true; // Public read để count likes
      allow create: if request.auth != null; // Authenticated users có thể like
      allow update: if request.auth != null && 
                   (request.auth.uid == resource.data.UserID || // Owner của like
                    (resource.data.UserID != null && request.auth.uid != null)); // Data sync operations
      allow delete: if request.auth != null || isAdmin(); // Users có thể unlike, admin có thể xóa bất kỳ like nào
    }
    
    // Friends collection - Authenticated users có thể CRUD relationships của mình
    match /friends/{friendshipId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && (request.auth.uid == request.resource.data.senderID 
        || request.auth.uid == request.resource.data.receiverID);
      allow update: if request.auth != null 
        && (request.auth.uid == resource.data.senderID 
        || request.auth.uid == resource.data.receiverID);
      allow delete: if request.auth != null 
        && (request.auth.uid == resource.data.senderID 
        || request.auth.uid == resource.data.receiverID);
    }
    
    // Notifications collection - Recipient có thể đọc và update (mark as read)
    match /notifications/{notificationId} {
      allow read, update: if request.auth != null 
        && request.auth.uid == resource.data.recipientId;
      allow create: if request.auth != null; // Cho phép tạo notification cho users khác
      allow delete: if false; // Không cho phép xóa notifications
    }
    
    // User Interests collection - Owner có thể CRUD
    match /userInterests/{userId} {
      allow read: if true; // Public read để gợi ý content
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User Locations collection cho nearby friends feature
    match /userLocations/{userId} {
      allow read: if request.auth != null; // Authenticated users có thể đọc locations để tìm nearby friends
      allow write: if request.auth != null && request.auth.uid == userId; // Chỉ owner có thể write location của mình
      allow delete: if request.auth != null && request.auth.uid == userId; // Chỉ owner có thể xóa location của mình
    }
    
    // Locations collection cho nearby users feature
    match /locations/{userId} {
      allow read: if request.auth != null; // Authenticated users có thể đọc locations để tìm nearby users
      allow write: if request.auth != null && request.auth.uid == userId; // Chỉ owner có thể write location của mình
      allow delete: if request.auth != null && request.auth.uid == userId; // Chỉ owner có thể xóa location của mình
    }
    
    // News collection - READ ONLY cho authenticated users, chỉ Firebase Functions có quyền ghi
    match /news/{newsId} {
      allow read: if request.auth != null; // Authenticated users có thể đọc tin tức
      allow write: if false; // Không cho phép user ghi tin tức - chỉ Firebase Functions có quyền
    }
    
    // Deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}